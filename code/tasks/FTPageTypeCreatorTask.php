<?php

use SilverStripe\Control\Director;
use SilverStripe\Core\Manifest\ModuleManifest;
use SilverStripe\Core\Path;
use SilverStripe\Dev\BuildTask;
use Faker\Factory;
use SilverStripe\Control\HTTPRequest;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Filesystem\Exception\IOException;

class FTPageTypeCreatorTask extends BuildTask
{
    /**
     * @var \Faker\Factory
     */
    protected $faker;

    /**
     * @var Filesystem
     */
    protected $fs;

    /**
     * @var Finder
     */
    protected $finder;

    /**
     * FTPageTypeCreatorTask constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->fs = new Filesystem();
        $this->faker = Factory::create();
        $this->finder = new Finder();
    }

    /**
     * @param HTTPRequest $request
     */
    public function run($request)
    {
        $totalCount = $request->getVar('count') ?: 20;

        $testPageDir = Path::join(Director::baseFolder(), ModuleManifest::config()->get('project'), 'code/test-pages');
        if (!$this->fs->exists($testPageDir)) {
            \SilverStripe\Assets\Filesystem::makeFolder($testPageDir);
        }

        $pageTypes = $this->getExistingClassNames($testPageDir);
        $createdCount = 0;
        $counter = 1;
        while ($createdCount < $totalCount) {
            $className = null;
            while (
                !$className ||
                in_array($className, $pageTypes) ||
                class_exists($className)
            ) {
                $className = $this->generateClassName($counter);
                $counter++;
            }
            $pageTypes[] = $className;
            $code = $this->generateClassCode($className);
            $filePath = sprintf('%s/%s.php', $testPageDir, $className);
            try {
                $this->fs->dumpFile($filePath, $code);
                $createdCount++;
            } catch (IOException $e) {
                echo "Could not write to file $filePath. Got error: {$e->getMessage()}\n";
                die();
            }
            echo "Created page type $className\n";
        }
    }

    private function getExistingClassNames($dir)
    {
        $files = $this->finder
            ->in($dir)
            ->files()
            ->name('GeneratedPageType*.php');

        return array_map(function ($file) {
            /* @var SplFileInfo $file */
            return basename($file->getBasename(), '.php');
        }, iterator_to_array($files));
    }

    private function generateClassName($counter)
    {
        return 'GeneratedPageType' . $counter;
    }

    private function generateClassCode($className)
    {
        $self = __CLASS__;
        $code = <<<PHP
<?php

/**
 * Generated by $self
 */
class $className extends Page implements TestPageInterface
{

}
PHP;
        return $code;
    }

}